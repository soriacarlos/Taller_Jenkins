def COLOR_MAP = [
  'SUCCESS': 'good',
  'FAILURE': 'danger'
]

def getBuildUser() {
  return currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()
}

pipeline {
  agent any

  environment {
    BUILD_USER = ''
  }

  tools {
    nodejs "node"
  }

  parameters {
    string(name: 'container_name', defaultValue: 'pagina_web', description: 'Nombre del contenedor de Docker.')
    string(name: 'image_name', defaultValue: 'pagina_img', description: 'Nombre de la imagen de Docker.')
    string(name: 'tag_image', defaultValue: 'lts', description: 'Tag de la imagen de la p√°gina')
    string(name: 'container_port', defaultValue: '80', description: 'Puerto del contenedor')
  }

  stages {
    stage('install') {
      steps {
        git branch: 'develop', url: 'https://github.com/soriacarlos/Taller_Jenkins.git'
        dir('frontend') {
          sh 'npm install'
        }
      }
    }

    stage('test') {
      steps {
        dir('frontend') {
          sh 'npm run test'
        }
      }
    }

    stage('build') {
      steps {
        dir('frontend') {
          script {
            try {
              sh 'docker stop ${container_name}'
              sh 'docker rm ${container_name}'
              sh 'docker rmi ${image_name}:${tag_image}'
            } catch (Exception e) {
              echo 'Exception occurred: ' + e.toString()
            }
          }
          sh 'npm run build'
          sh 'docker build -t ${image_name}:${tag_image} .'
        }
      }
    }

    stage('deploy') {
      steps {
        sh 'docker run -d -p ${container_port}:80 --name ${container_name} ${image_name}:${tag_image}'
      }
    }

  }

  post {
    always {

      script {
        BUILD_USER = getBuildUser()
      }

      slackSend channel: 'jenkins-example',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} by ${BUILD_USER} \n Container executed ${container_name} \n More info at ${env.BUILD_URL}"

    }
  }
}
